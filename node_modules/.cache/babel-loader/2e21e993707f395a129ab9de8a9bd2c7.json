{"ast":null,"code":"var _jsxFileName = \"/Users/ketanrikame/Downloads/reactjs-tic-tac-toe-master/src/components/Game/index.js\";\nimport React, { useState } from 'react';\nimport Board from '../Board';\nimport { calculateWinner } from '../../winner';\nimport './style.css';\n\nfunction Game() {\n  const [history, setHistory] = useState([Array(16).fill(null)]); //history será um array que irá armazenar todas as jogadas, iniciando com null\n\n  const [stepNumber, setStepNumber] = useState(0); //stepNumber contará o número de jogadas\n\n  const [isXNext, setIsXNext] = useState(true); //isXNext verifica se o próximo valor a ser inserido no quadrado é \"X\" ou \"O\"\n\n  const winner = calculateWinner(history[stepNumber]); //usa o método calculateWinner do arquivo \"winner\" para verificar quem é o vencedor, enviando como parâmetro a jogada atual (history[stepNumber])\n\n  function handleClick(i) {\n    const timeInHistory = history.slice(0, stepNumber + 1); //retorna um array do histórico de jogadas começando do 0 até o número de jogadas\n\n    const current = timeInHistory[stepNumber]; //current armazena a jogada atual\n\n    const squares = [...current]; //squares armazena uma cópia da jogada atual\n\n    if (winner || squares[i]) return; //se já houver um vencedor ou se o jogador clicar em um quadrado ocupado, ele retorna\n\n    squares[i] = isXNext ? 'X' : 'O'; //Insere um X ou O no quadrado clicado\n\n    setHistory([...timeInHistory, squares]); //atualiza o estado de history adicionando uma cópia de timeInHistory e acrescentando squares\n\n    setStepNumber(timeInHistory.length); //atualiza o estado de stepNumber que será igual ao tamanho do array timeInHistory\n\n    setIsXNext(!isXNext); //troca o valor de isXNext\n  }\n\n  const jumpTo = step => {\n    //atualizada o estado de stepNumber para o número da jogada passado no parâmetro.\n    //Por exemplo, se o jogador clicar no botão \"Jump to 2\", step terá o valor 2 e o jogo volta na 2º jogada\n    setStepNumber(step);\n    setIsXNext(step % 2 === 0); //se o módulo de step dividido por 2 for igual a 0, isXNext será true, significando que o próximo jogador será \"X\"\n  };\n\n  const renderMoves = () => //_step é o array de jogadas\n  //move é o número da jogada\n  //aqui será criada a lista de botões para voltar a cada jogada realizada\n  //quando o jogador clicar em um dos botões, será chamado o método jumpTo(move) passando o número da jogada como parâmetro\n  history.map((_step, move) => {\n    const destination = move ? `Ir para jogada ${move}` : \"Início\";\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"listButtons\",\n      key: move,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: () => jumpTo(move),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }, destination));\n  });\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, winner ? 'Vencedor: ' + winner : 'Próximo jogador: ' + (isXNext ? 'X' : 'O'))), /*#__PURE__*/React.createElement(Board, {\n    squares: history[stepNumber],\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"moves\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, renderMoves()));\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/ketanrikame/Downloads/reactjs-tic-tac-toe-master/src/components/Game/index.js"],"names":["React","useState","Board","calculateWinner","Game","history","setHistory","Array","fill","stepNumber","setStepNumber","isXNext","setIsXNext","winner","handleClick","i","timeInHistory","slice","current","squares","length","jumpTo","step","renderMoves","map","_step","move","destination"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Board from '../Board'\nimport { calculateWinner } from '../../winner'\nimport './style.css'\n\n\nfunction Game() {\n    const [history, setHistory] = useState([Array(16).fill(null)]) //history será um array que irá armazenar todas as jogadas, iniciando com null\n    const [stepNumber, setStepNumber] = useState(0) //stepNumber contará o número de jogadas\n    const [isXNext, setIsXNext] = useState(true) //isXNext verifica se o próximo valor a ser inserido no quadrado é \"X\" ou \"O\"\n    const winner = calculateWinner(history[stepNumber]) //usa o método calculateWinner do arquivo \"winner\" para verificar quem é o vencedor, enviando como parâmetro a jogada atual (history[stepNumber])\n\n    function handleClick(i) {\n        const timeInHistory = history.slice(0, stepNumber + 1) //retorna um array do histórico de jogadas começando do 0 até o número de jogadas\n        const current = timeInHistory[stepNumber] //current armazena a jogada atual\n        const squares = [...current] //squares armazena uma cópia da jogada atual\n\n        if (winner || squares[i]) return; //se já houver um vencedor ou se o jogador clicar em um quadrado ocupado, ele retorna\n\n        squares[i] = isXNext ? 'X' : 'O'; //Insere um X ou O no quadrado clicado\n        setHistory([...timeInHistory, squares]) //atualiza o estado de history adicionando uma cópia de timeInHistory e acrescentando squares\n        setStepNumber(timeInHistory.length) //atualiza o estado de stepNumber que será igual ao tamanho do array timeInHistory\n        setIsXNext(!isXNext)//troca o valor de isXNext\n    }\n\n    const jumpTo = step => {\n        //atualizada o estado de stepNumber para o número da jogada passado no parâmetro.\n        //Por exemplo, se o jogador clicar no botão \"Jump to 2\", step terá o valor 2 e o jogo volta na 2º jogada\n        setStepNumber(step)\n        setIsXNext(step % 2 === 0)//se o módulo de step dividido por 2 for igual a 0, isXNext será true, significando que o próximo jogador será \"X\"\n    }\n\n    const renderMoves = () => (\n        //_step é o array de jogadas\n        //move é o número da jogada\n        //aqui será criada a lista de botões para voltar a cada jogada realizada\n        //quando o jogador clicar em um dos botões, será chamado o método jumpTo(move) passando o número da jogada como parâmetro\n        history.map((_step, move) => {\n            const destination = move ? `Ir para jogada ${move}` : \"Início\"\n            return (\n                <li className='listButtons' key={move}>\n                    <button className='buttons' onClick={() => jumpTo(move)}>{destination}</button>\n                </li>\n            )\n        })\n    )\n\n\n    return (\n        <>\n            <div className=\"player\">\n                <p>{winner ? 'Vencedor: ' + winner : 'Próximo jogador: ' + (isXNext ? 'X' : 'O')}</p>\n            </div>\n            <Board squares={history[stepNumber]} onClick={handleClick} />\n            <div className=\"moves\">\n                {renderMoves()}\n            </div>\n        </>\n    )\n\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}